using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Nerdbank.GitVersioning.Tasks;
using Xunit;

namespace NerdBank.GitVersioning.Tests
{
    public class AssemblyInfoTest
    {
        [Fact]
        public void FSharpGenerator()
        {
            var info = new AssemblyVersionInfo
            {
                AssemblyCompany = "company",
                AssemblyFileVersion = "1.3.1.0",
                AssemblyVersion = "1.3.0.0",
                CodeLanguage = "f#"
            };

            var built = info.BuildCode();

            var expected = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AssemblyInfo
[<assembly: System.Reflection.AssemblyVersionAttribute(""1.3.0.0"")>]
[<assembly: System.Reflection.AssemblyFileVersionAttribute(""1.3.1.0"")>]
[<assembly: System.Reflection.AssemblyInformationalVersionAttribute("""")>]
do()
type internal ThisAssembly() =
  static member internal AssemblyVersion = ""1.3.0.0""
  static member internal AssemblyFileVersion = ""1.3.1.0""
  static member internal AssemblyCompany = ""company""
  static member internal RootNamespace = """"
do()
";
            Assert.Equal(expected, built);
        }

        [Fact]
        public void CSharpGenerator()
        {
            var info = new AssemblyVersionInfo
            {
                AssemblyCompany = "company",
                AssemblyFileVersion = "1.3.1.0",
                AssemblyVersion = "1.3.0.0",
                CodeLanguage = "c#"
            };

            var built = info.BuildCode();

            var expected = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersionAttribute(""1.3.0.0"")]
[assembly: System.Reflection.AssemblyFileVersionAttribute(""1.3.1.0"")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("""")]
internal static partial class ThisAssembly {
    internal const string AssemblyVersion = ""1.3.0.0"";
    internal const string AssemblyFileVersion = ""1.3.1.0"";
    internal const string AssemblyCompany = ""company"";
    internal const string RootNamespace = """";
}
";
            Assert.Equal(expected, built);
        }

        [Fact]
        public void CSharpCodeDomGenerator()
        {
            var info = new AssemblyVersionInfo
            {
                AssemblyCompany = "company",
                AssemblyFileVersion = "1.3.1.0",
                AssemblyVersion = "1.3.0.0",
                CodeLanguage = "c#"
            };

            var built = info.BuildCodeWithCodeDomProvider();

            var expected = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersionAttribute(""1.3.0.0"")]
[assembly: System.Reflection.AssemblyFileVersionAttribute(""1.3.1.0"")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute(null)]


internal sealed partial class ThisAssembly {
    internal const string AssemblyVersion = ""1.3.0.0"";
    internal const string AssemblyFileVersion = ""1.3.1.0"";
    internal const string AssemblyCompany = ""company"";
    internal const string RootNamespace = null;
    private ThisAssembly() {
    }
}
";
            Assert.Equal(expected, built);
        }
    }
}
